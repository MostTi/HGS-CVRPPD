"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _superagent = _interopRequireDefault(require("superagent"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _OrsUtil = _interopRequireDefault(require("./OrsUtil"));

var _constants = _interopRequireDefault(require("./constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var orsUtil = new _OrsUtil["default"]();

var OrsDirections = /*#__PURE__*/function () {
  function OrsDirections(args) {
    _classCallCheck(this, OrsDirections);

    this.args = {};
    this.meta = null;

    if (_constants["default"].propNames.apiKey in args) {
      this.args[_constants["default"].propNames.apiKey] = args[_constants["default"].propNames.apiKey];
    } else {
      // eslint-disable-next-line no-console
      console.error(_constants["default"].missingAPIKeyMsg);
      throw new Error(_constants["default"].missingAPIKeyMsg);
    }

    if (_constants["default"].propNames.host in args) {
      this.args[_constants["default"].propNames.host] = args[_constants["default"].propNames.host];
    }

    if (_constants["default"].propNames.service in args) {
      this.args[_constants["default"].propNames.service] = args[_constants["default"].propNames.service];
    }
  }

  _createClass(OrsDirections, [{
    key: "clear",
    value: function clear() {
      for (var variable in this.args) {
        if (variable !== _constants["default"].apiKeyPropName) delete this.args[variable];
      }
    }
  }, {
    key: "clearPoints",
    value: function clearPoints() {
      if ('coordinates' in this.args) this.args.coordinates.length = 0;
    }
  }, {
    key: "addWaypoint",
    value: function addWaypoint(latLon) {
      if (!('coordinates' in this.args)) {
        this.args.coordinates = [];
      }

      this.args.coordinates.push(latLon);
    }
  }, {
    key: "getBody",
    value: function getBody(args) {
      if (args.options && _typeof(args.options) !== 'object') {
        args.options = JSON.parse(args.options);
      } // Set the default vehicle type when profile is 'driving-hgv' if it is missing
      // eslint-disable-next-line prettier/prettier


      if (this.meta && this.meta.profile === 'driving-hgv' && (!args.options || !args.options.vehicle_type)) {
        args.options = args.options || {};
        args.options.vehicle_type = 'hgv';
      }

      if (args.restrictions) {
        args.options = args.options || {};
        args.options.profile_params = {
          restrictions: _objectSpread({}, args.restrictions)
        };
        delete args.options.restrictions;
      }

      if (args.avoidables) {
        args.options = args.options || {};
        args.options.avoid_features = _toConsumableArray(args.avoidables);
        delete args.avoidables;
      }

      return args;
    }
  }, {
    key: "calculate",
    value: function calculate(reqArgs) {
      // Get custom header and remove from args
      this.customHeaders = [];

      if (reqArgs.customHeaders) {
        this.customHeaders = reqArgs.customHeaders;
        delete reqArgs.customHeaders;
      }

      orsUtil.setRequestDefaults(this.args, reqArgs, true);

      if (!this.args[_constants["default"].propNames.service]) {
        this.args[_constants["default"].propNames.service] = 'directions';
      }

      orsUtil.copyProperties(reqArgs, this.args);
      var that = this;
      return new _bluebird["default"](function (resolve, reject) {
        var timeout = that.args[_constants["default"].propNames.timeout] || 10000; // meta should be generated once that subsequent requests work

        if (that.meta == null) {
          that.meta = orsUtil.prepareMeta(that.args);
        }

        that.httpArgs = orsUtil.prepareRequest(that.args);
        var url = orsUtil.prepareUrl(that.meta);
        var postBody = that.getBody(that.httpArgs);
        var authorization = that.meta[_constants["default"].propNames.apiKey];

        var orsRequest = _superagent["default"].post(url).send(postBody).set('Authorization', authorization).timeout(timeout); // .accept(that.meta.mimeType)


        for (var key in that.customHeaders) {
          orsRequest.set(key, that.customHeaders[key]);
        }

        orsRequest.end(function (err, res) {
          if (err || !res.ok) {
            // eslint-disable-next-line no-console
            console.error(err);
            reject(err);
          } else if (res) {
            resolve(res.body || res.text);
          }
        });
      });
    }
  }]);

  return OrsDirections;
}();

var _default = OrsDirections;
exports["default"] = _default;