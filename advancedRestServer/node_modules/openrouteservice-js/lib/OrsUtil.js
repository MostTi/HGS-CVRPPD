"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _constants = _interopRequireDefault(require("./constants"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var OrsUtil = /*#__PURE__*/function () {
  function OrsUtil() {
    _classCallCheck(this, OrsUtil);
  }

  _createClass(OrsUtil, [{
    key: "copyProperties",
    value: function copyProperties(args, argsInto) {
      if (!args) return argsInto;

      for (var prop in args) {
        // eslint-disable-next-line no-prototype-builtins
        if (args.hasOwnProperty(prop) && args[prop] !== undefined) {
          argsInto[prop] = args[prop];
        }
      }

      return argsInto;
    }
  }, {
    key: "prepareMeta",
    value: function prepareMeta(args) {
      return {
        host: args[_constants["default"].propNames.host],
        api_version: args[_constants["default"].propNames.apiVersion],
        profile: args[_constants["default"].propNames.profile],
        format: args[_constants["default"].propNames.format],
        service: args[_constants["default"].propNames.service],
        api_key: args[_constants["default"].propNames.apiKey],
        mime_type: args[_constants["default"].propNames.mimeType]
      };
    }
  }, {
    key: "prepareRequest",
    value: function prepareRequest(args) {
      delete args[_constants["default"].propNames.mimeType];
      delete args[_constants["default"].propNames.host];
      delete args[_constants["default"].propNames.apiVersion];
      delete args[_constants["default"].propNames.service];
      delete args[_constants["default"].propNames.apiKey];
      delete args[_constants["default"].propNames.profile];
      delete args[_constants["default"].propNames.format];
      delete args[_constants["default"].propNames.timeout];
      return _objectSpread({}, args);
    }
    /**
     * Prepare the request url based on url constituents
     * @param {Object} args
     */

  }, {
    key: "prepareUrl",
    value: function prepareUrl(args) {
      var url, urlPathParts; // If the service already defines the path
      // to the request service we have to add
      // only yhe profile and the format to the url
      // eslint-disable-next-line prettier/prettier

      if (args[_constants["default"].propNames.service] && args[_constants["default"].propNames.service].indexOf('http') === 0) {
        url = args[_constants["default"].propNames.service];
        urlPathParts = [args[_constants["default"].propNames.profile], args[_constants["default"].propNames.format]];
      } else {
        // if not, build the url from scratch
        url = args[_constants["default"].propNames.host];
        urlPathParts = [args[_constants["default"].propNames.apiVersion], args[_constants["default"].propNames.service], args[_constants["default"].propNames.profile], args[_constants["default"].propNames.format]];
      }

      var urlPath = '/';
      var counter = 0;

      for (var key in urlPathParts) {
        if (urlPathParts[key]) {
          if (counter > 0 && counter) {
            urlPath += '/';
          }

          urlPath += urlPathParts[key];
        }

        counter++;
      } // Remove double slashes from path


      var cleanUrlPath = urlPath.replace(/\/\//g, '/');
      url += cleanUrlPath; // The end of the url can not be a slash

      if (url.slice(-1) === '/') {
        url = url.slice(0, -1);
      }

      return url;
    }
    /**
     * Set defaults for a request comparing and overwriting instance args
     * @param {Object} instanceArgs
     * @param {Object} requestArgs
     * @param {Boolean} setAPIVersion
     */

  }, {
    key: "setRequestDefaults",
    value: function setRequestDefaults(instanceArgs, requestArgs) {
      var setAPIVersion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      if (requestArgs[_constants["default"].propNames.service]) {
        // eslint-disable-next-line prettier/prettier
        instanceArgs[_constants["default"].propNames.service] = requestArgs[_constants["default"].propNames.service];
      }

      if (requestArgs[_constants["default"].propNames.host]) {
        // eslint-disable-next-line prettier/prettier
        instanceArgs[_constants["default"].propNames.host] = requestArgs[_constants["default"].propNames.host];
      }

      if (!instanceArgs[_constants["default"].propNames.host]) {
        instanceArgs[_constants["default"].propNames.host] = _constants["default"].defaultHost;
      }

      if (setAPIVersion === true) {
        if (!requestArgs[_constants["default"].propNames.apiVersion]) {
          requestArgs.api_version = _constants["default"].defaultAPIVersion;
        }

        if (!requestArgs[_constants["default"].propNames.apiVersion]) {
          requestArgs.api_version = _constants["default"].defaultAPIVersion;
        }
      }
    }
  }]);

  return OrsUtil;
}();

var _default = OrsUtil;
exports["default"] = _default;